# swagger_petstore_open_api30
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SwaggerPetstoreOpenApi30
  # UserController
  class UserController < BaseController
    # This can only be done by the logged in user.
    # @param [Integer] id Optional parameter: Example:
    # @param [String] username Optional parameter: Example:
    # @param [String] first_name Optional parameter: Example:
    # @param [String] last_name Optional parameter: Example:
    # @param [String] email Optional parameter: Example:
    # @param [String] password Optional parameter: Example:
    # @param [String] phone Optional parameter: Example:
    # @param [Integer] user_status Optional parameter: User Status
    # @return [User] response from the API call
    def create_user(id: nil,
                    username: nil,
                    first_name: nil,
                    last_name: nil,
                    email: nil,
                    password: nil,
                    phone: nil,
                    user_status: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/user',
                                     Server::DEFAULT)
                   .form_param(new_parameter(id, key: 'id'))
                   .form_param(new_parameter(username, key: 'username'))
                   .form_param(new_parameter(first_name, key: 'firstName'))
                   .form_param(new_parameter(last_name, key: 'lastName'))
                   .form_param(new_parameter(email, key: 'email'))
                   .form_param(new_parameter(password, key: 'password'))
                   .form_param(new_parameter(phone, key: 'phone'))
                   .form_param(new_parameter(user_status, key: 'userStatus'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(User.method(:from_hash)))
        .execute
    end

    # Creates list of users with given input array
    # @param [List of User] body Optional parameter: Example:
    # @return [User] response from the API call
    def create_users_with_list_input(body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/user/createWithList',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(User.method(:from_hash))
                   .local_error('default',
                                'successful operation',
                                APIException))
        .execute
    end

    # Logs user into the system
    # @param [String] username Optional parameter: The user name for login
    # @param [String] password Optional parameter: The password for login in
    # clear text
    # @return [String] response from the API call
    def login_user(username: nil,
                   password: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/user/login',
                                     Server::DEFAULT)
                   .query_param(new_parameter(username, key: 'username'))
                   .query_param(new_parameter(password, key: 'password'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:deserialize_primitive_types))
                   .deserialize_into(proc do |response| response.to_s end)
                   .is_primitive_response(true)
                   .local_error('400',
                                'Invalid username/password supplied',
                                APIException))
        .execute
    end

    # Logs out current logged in user session
    # @return [void] response from the API call
    def logout_user
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/user/logout',
                                     Server::DEFAULT)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # Get user by user name
    # @param [String] name Required parameter: The name that needs to be
    # fetched. Use user1 for testing.
    # @return [User] response from the API call
    def get_user_by_name(name)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/user/{name}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(name, key: 'name')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(User.method(:from_hash))
                   .local_error('400',
                                'Invalid username supplied',
                                APIException)
                   .local_error('404',
                                'User not found',
                                APIException))
        .execute
    end

    # This can only be done by the logged in user.
    # @param [String] name Required parameter: name that need to be deleted
    # @param [Integer] id Optional parameter: Example:
    # @param [String] username Optional parameter: Example:
    # @param [String] first_name Optional parameter: Example:
    # @param [String] last_name Optional parameter: Example:
    # @param [String] email Optional parameter: Example:
    # @param [String] password Optional parameter: Example:
    # @param [String] phone Optional parameter: Example:
    # @param [Integer] user_status Optional parameter: User Status
    # @return [void] response from the API call
    def update_user(name,
                    id: nil,
                    username: nil,
                    first_name: nil,
                    last_name: nil,
                    email: nil,
                    password: nil,
                    phone: nil,
                    user_status: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/user/{name}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(name, key: 'name')
                                    .should_encode(true))
                   .form_param(new_parameter(id, key: 'id'))
                   .form_param(new_parameter(username, key: 'username'))
                   .form_param(new_parameter(first_name, key: 'firstName'))
                   .form_param(new_parameter(last_name, key: 'lastName'))
                   .form_param(new_parameter(email, key: 'email'))
                   .form_param(new_parameter(password, key: 'password'))
                   .form_param(new_parameter(phone, key: 'phone'))
                   .form_param(new_parameter(user_status, key: 'userStatus'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true))
        .execute
    end

    # This can only be done by the logged in user.
    # @param [String] name Required parameter: The name that needs to be
    # deleted
    # @return [void] response from the API call
    def delete_user(name)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/user/{name}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(name, key: 'name')
                                    .should_encode(true))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('400',
                                'Invalid username supplied',
                                APIException)
                   .local_error('404',
                                'User not found',
                                APIException))
        .execute
    end
  end
end
