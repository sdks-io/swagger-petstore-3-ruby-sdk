# swagger_petstore_open_api30
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SwaggerPetstoreOpenApi30
  # StoreController
  class StoreController < BaseController
    # Returns a map of status codes to quantities
    # @return [Hash of Integer] response from the API call
    def get_inventory
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/store/inventory',
                                     Server::DEFAULT)
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:deserialize_primitive_types))
                   .deserialize_into(proc do |response| response.to_i end)
                   .is_primitive_response(true))
        .execute
    end

    # Place a new order in the store
    # @param [Integer] id Optional parameter: Example:
    # @param [Integer] pet_id Optional parameter: Example:
    # @param [Integer] quantity Optional parameter: Example:
    # @param [DateTime] ship_date Optional parameter: Example:
    # @param [OrderStatusEnum] order_status Optional parameter: Order Status
    # @param [TrueClass|FalseClass] complete Optional parameter: Example:
    # @return [Order] response from the API call
    def place_order(id: nil,
                    pet_id: nil,
                    quantity: nil,
                    ship_date: nil,
                    order_status: OrderStatusEnum::APPROVED,
                    complete: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/store/order',
                                     Server::DEFAULT)
                   .form_param(new_parameter(id, key: 'id'))
                   .form_param(new_parameter(pet_id, key: 'petId'))
                   .form_param(new_parameter(quantity, key: 'quantity'))
                   .form_param(new_parameter(ship_date, key: 'shipDate'))
                   .form_param(new_parameter(order_status, key: 'orderStatus'))
                   .form_param(new_parameter(complete, key: 'complete'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Order.method(:from_hash))
                   .local_error('405',
                                'Invalid input',
                                APIException))
        .execute
    end

    # For valid response try integer IDs with value <= 5 or > 10. Other values
    # will generate exceptions.
    # @param [Integer] order_id Required parameter: ID of order that needs to be
    # fetched
    # @return [Order] response from the API call
    def get_order_by_id(order_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/store/order/{orderId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(order_id, key: 'orderId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Order.method(:from_hash))
                   .local_error('400',
                                'Invalid ID supplied',
                                APIException)
                   .local_error('404',
                                'Order not found',
                                APIException))
        .execute
    end

    # For valid response try integer IDs with value < 1000. Anything above 1000
    # or nonintegers will generate API errors
    # @param [Integer] order_id Required parameter: ID of the order that needs
    # to be deleted
    # @return [void] response from the API call
    def delete_order(order_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/store/order/{orderId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(order_id, key: 'orderId')
                                    .should_encode(true))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('400',
                                'Invalid ID supplied',
                                APIException)
                   .local_error('404',
                                'Order not found',
                                APIException))
        .execute
    end
  end
end
