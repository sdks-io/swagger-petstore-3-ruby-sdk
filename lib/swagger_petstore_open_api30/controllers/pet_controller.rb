# swagger_petstore_open_api30
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SwaggerPetstoreOpenApi30
  # PetController
  class PetController < BaseController
    # Update an existing pet by Id
    # @param [String] name Required parameter: Example:
    # @param [List of String] photo_urls Required parameter: Example:
    # @param [Integer] id Optional parameter: Example:
    # @param [Category] category Optional parameter: Example:
    # @param [List of Tag] tags Optional parameter: Example:
    # @param [PetStatusEnum] pet_status Optional parameter: pet status in the
    # store
    # @return [Pet] response from the API call
    def update_pet(name,
                   photo_urls,
                   id: nil,
                   category: nil,
                   tags: nil,
                   pet_status: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/pet',
                                     Server::DEFAULT)
                   .form_param(new_parameter(name, key: 'name'))
                   .form_param(new_parameter(photo_urls, key: 'photoUrls'))
                   .form_param(new_parameter(id, key: 'id'))
                   .form_param(new_parameter(category, key: 'category'))
                   .form_param(new_parameter(tags, key: 'tags'))
                   .form_param(new_parameter(pet_status, key: 'petStatus'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Pet.method(:from_hash))
                   .local_error('400',
                                'Invalid ID supplied',
                                APIException)
                   .local_error('404',
                                'Pet not found',
                                APIException)
                   .local_error('405',
                                'Validation exception',
                                APIException))
        .execute
    end

    # Add a new pet to the store
    # @param [String] name Required parameter: Example:
    # @param [List of String] photo_urls Required parameter: Example:
    # @param [Integer] id Optional parameter: Example:
    # @param [Category] category Optional parameter: Example:
    # @param [List of Tag] tags Optional parameter: Example:
    # @param [PetStatusEnum] pet_status Optional parameter: pet status in the
    # store
    # @return [Pet] response from the API call
    def add_pet(name,
                photo_urls,
                id: nil,
                category: nil,
                tags: nil,
                pet_status: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/pet',
                                     Server::DEFAULT)
                   .form_param(new_parameter(name, key: 'name'))
                   .form_param(new_parameter(photo_urls, key: 'photoUrls'))
                   .form_param(new_parameter(id, key: 'id'))
                   .form_param(new_parameter(category, key: 'category'))
                   .form_param(new_parameter(tags, key: 'tags'))
                   .form_param(new_parameter(pet_status, key: 'petStatus'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Pet.method(:from_hash))
                   .local_error('405',
                                'Invalid input',
                                APIException))
        .execute
    end

    # Multiple status values can be provided with comma separated strings
    # @param [StatusEnum] status Optional parameter: Status values that need to
    # be considered for filter
    # @return [List of Pet] response from the API call
    def find_pets_by_status(status: StatusEnum::AVAILABLE)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/pet/findByStatus',
                                     Server::DEFAULT)
                   .query_param(new_parameter(status, key: 'status'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Pet.method(:from_hash))
                   .is_response_array(true)
                   .local_error('400',
                                'Invalid status value',
                                APIException))
        .execute
    end

    # Multiple tags can be provided with comma separated strings. Use tag1,
    # tag2, tag3 for testing.
    # @param [List of String] tags Optional parameter: Tags to filter by
    # @return [List of Pet] response from the API call
    def find_pets_by_tags(tags: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/pet/findByTags',
                                     Server::DEFAULT)
                   .query_param(new_parameter(tags, key: 'tags'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Pet.method(:from_hash))
                   .is_response_array(true)
                   .local_error('400',
                                'Invalid tag value',
                                APIException))
        .execute
    end

    # Returns a single pet
    # @param [Integer] pet_id Required parameter: ID of pet to return
    # @return [Pet] response from the API call
    def get_pet_by_id(pet_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/pet/{petId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(pet_id, key: 'petId')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(Pet.method(:from_hash))
                   .local_error('400',
                                'Invalid ID supplied',
                                APIException)
                   .local_error('404',
                                'Pet not found',
                                APIException))
        .execute
    end

    # Updates a pet in the store with form data
    # @param [Integer] pet_id Required parameter: ID of pet that needs to be
    # updated
    # @param [String] name Optional parameter: Name of pet that needs to be
    # updated
    # @param [String] status Optional parameter: Status of pet that needs to be
    # updated
    # @return [void] response from the API call
    def update_pet_with_form(pet_id,
                             name: nil,
                             status: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/pet/{petId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(pet_id, key: 'petId')
                                    .should_encode(true))
                   .query_param(new_parameter(name, key: 'name'))
                   .query_param(new_parameter(status, key: 'status'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('405',
                                'Invalid input',
                                APIException))
        .execute
    end

    # delete a pet
    # @param [Integer] pet_id Required parameter: Pet id to delete
    # @param [String] api_key Optional parameter: Example:
    # @return [void] response from the API call
    def delete_pet(pet_id,
                   api_key: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/pet/{petId}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(pet_id, key: 'petId')
                                    .should_encode(true))
                   .header_param(new_parameter(api_key, key: 'api_key'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .is_response_void(true)
                   .local_error('400',
                                'Invalid pet value',
                                APIException))
        .execute
    end

    # uploads an image
    # @param [Integer] pet_id Required parameter: ID of pet to update
    # @param [String] additional_metadata Optional parameter: Additional
    # Metadata
    # @param [File | UploadIO] body Optional parameter: Example:
    # @return [PetImage] response from the API call
    def upload_file(pet_id,
                    additional_metadata: nil,
                    body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/pet/{petId}/uploadImage',
                                     Server::DEFAULT)
                   .template_param(new_parameter(pet_id, key: 'petId')
                                    .should_encode(true))
                   .query_param(new_parameter(additional_metadata, key: 'additionalMetadata'))
                   .multipart_param(new_parameter(body, key: 'body')
                                     .default_content_type('application/octet-stream'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('global')))
        .response(new_response_handler
                   .deserializer(APIHelper.method(:custom_type_deserializer))
                   .deserialize_into(PetImage.method(:from_hash)))
        .execute
    end
  end
end
